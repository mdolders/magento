<?php
/**
 *                  ___________       __            __
 *                  \__    ___/____ _/  |_ _____   |  |
 *                    |    |  /  _ \\   __\\__  \  |  |
 *                    |    | |  |_| ||  |   / __ \_|  |__
 *                    |____|  \____/ |__|  (____  /|____/
 *                                              \/
 *          ___          __                                   __
 *         |   |  ____ _/  |_   ____ _______   ____    ____ _/  |_
 *         |   | /    \\   __\_/ __ \\_  __ \ /    \ _/ __ \\   __\
 *         |   ||   |  \|  |  \  ___/ |  | \/|   |  \\  ___/ |  |
 *         |___||___|  /|__|   \_____>|__|   |___|  / \_____>|__|
 *                  \/                           \/
 *                  ________
 *                 /  _____/_______   ____   __ __ ______
 *                /   \  ___\_  __ \ /  _ \ |  |  \\____ \
 *                \    \_\  \|  | \/|  |_| ||  |  /|  |_| |
 *                 \______  /|__|    \____/ |____/ |   __/
 *                        \/                       |__|
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Creative Commons License.
 * It is available through the world-wide-web at this URL:
 * http://creativecommons.org/licenses/by-nc-nd/3.0/nl/deed.en_US
 * If you are unable to obtain it through the world-wide-web, please send an email
 * to servicedesk@tig.nl so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for your
 * needs please contact servicedesk@tig.nl for more information.
 *
 * @copyright   Copyright (c) 2016 Total Internet Group B.V. (http://www.tig.nl)
 * @license     http://creativecommons.org/licenses/by-nc-nd/3.0/nl/deed.en_US
 */
?>
<?php $_readOnly = ''; ?>
<?php $_readOnlyClass = ''; ?>
<?php if ($this->getAddress()->getCountryId() == 'NL'): ?>
    <?php $_readOnly = 'readonly=""'; ?>
    <?php $_readOnlyClass = 'postnl-readonly'; ?>
<?php endif; ?>

<?php $_addressType = $this->hasAddressType() ? $this->getAddressType() : 'billing'; ?>
<?php $_streetValidationClass = $this->helper('postnl/addressValidation')->getAttributeValidationClass('street'); ?>
<?php $_streetValidationClassNotRequired = trim(str_replace('required-entry', '', $_streetValidationClass)); ?>

<?php $_postnlHelper = Mage::helper('postnl/addressValidation'); ?>

<?php $_timeoutDelay = $_postnlHelper->getPostcodeCheckTimeoutDelay(); ?>
<?php $_maxAttempts  = $_postnlHelper->getPostcodeCheckMaxAttempts(); ?>
<li>
    <label for="<?php echo $_addressType; ?>:country_id" class="required"><em>*</em><?php echo $_postnlHelper->__('Country') ?></label>
    <div class="input-box">
        <?php echo $this->getCountryHtmlSelect() ?>
    </div>
</li>
<li class="fields" id="opc_postnl">
    <div class="field field-postcode">
        <label for="<?php echo $_addressType; ?>:postcode" class="required"><em>*</em><?php echo $_postnlHelper->__('Zip/Postal Code') ?></label>
        <div class="input-box">
            <input type="text" title="<?php echo $_postnlHelper->__('Zip/Postal Code') ?>" name="<?php echo $_addressType; ?>[postcode]" id="<?php echo $_addressType; ?>:postcode" value="<?php echo $this->escapeHtml($this->getAddress()->getPostcode()) ?>" class="input-text validate-zip-international postnl-validate-postcode <?php echo $this->helper('postnl/addressValidation')->getAttributeValidationClass('postcode') ?>" />
        </div>
    </div>
    <div class="field field-housenumber">
        <label for="<?php echo $_addressType; ?>:street2" class="required"><em>*</em><?php echo $_postnlHelper->__('Housenumber') ?></label>
        <div class="input-box">
            <input type="text" title="<?php echo $_postnlHelper->__('Housenumber') ?>" name="virtual_<?php echo $_addressType; ?>[street][]" id="virtual:<?php echo $_addressType; ?>:street2" value="<?php echo $this->escapeHtml($this->getAddress()->getStreet(2)) ?>" class="input-text postnl-validate-housenumber <?php echo $_streetValidationClass ?>" />
        </div>
    </div>
    <div class="field field-extension">
        <label for="<?php echo $_addressType; ?>:street3"><?php echo $_postnlHelper->__('Extension') ?></label>
        <div class="input-box">
            <input type="text" title="<?php echo $_postnlHelper->__('Extension') ?>" name="virtual_<?php echo $_addressType; ?>[street][]" id="virtual:<?php echo $_addressType; ?>:street3" value="<?php echo $this->escapeHtml($this->getAddress()->getStreet(3)) ?>" class="input-text <?php echo $_streetValidationClassNotRequired ?>" />
        </div>
    </div>
    <div id="postnl_postcodecheck_spinner_<?php echo $_addressType ?>" class="postnl-loading" style="display:none;">
        <img src="<?php echo $this->getSkinUrl('/images/TIG/PostNL/opc-ajax-loader.gif'); ?>"/>
    </div>
    <div class="postnl validation-advice" style="display:none;" id="postnl_address_error_<?php echo $_addressType; ?>">
        <?php echo $_postnlHelper->__('Your postcode/housenumber combination could not be found. Please enter your streetname and city manually.'); ?>
    </div>
    <div class="postnl validation-advice" style="display:none;" id="postnl_address_missing_<?php echo $_addressType; ?>">
        <?php echo $_postnlHelper->__('Please enter a postcode and housenumber.'); ?>
    </div>
    <div class="postnl validation-advice" style="display:none;" id="postnl_address_invalid_<?php echo $_addressType; ?>">
        <?php echo $_postnlHelper->__('Your postcode/housenumber combination could not be found. Please make sure you have entered a valid postcode and housenumber and try again.'); ?>
    </div>
</li>
<li>
    <label for="<?php echo $_addressType; ?>:street1" class="required"><em>*</em><?php echo $_postnlHelper->__('Street name') ?></label>
    <div class="input-box">
        <input type="text" title="<?php echo $_postnlHelper->__('Street name') ?>" name="virtual_<?php echo $_addressType; ?>[street][]" id="virtual:<?php echo $_addressType; ?>:street1" value="<?php echo $this->escapeHtml($this->getAddress()->getStreet(1)) ?>" class="input-text <?php echo $_streetValidationClass ?> <?php echo $_readOnlyClass; ?>" <?php echo $_readOnly; ?>/>
    </div>
</li>
<?php /* Only street lines 4+ will be used as expected. Street lines 1, 2 and 3 are used for the postcode check. */ ?>
<?php for ($_i = 4, $_n = $this->helper('customer/address')->getStreetLines(); $_i <= $_n; $_i++): ?>
    <li class="add-field">
        <div class="input-box">
            <input type="text" title="<?php echo $_postnlHelper->__('Street Address %s', $_i) ?>" name="virtual_<?php echo $_addressType; ?>[street][]" id="virtual:<?php echo $_addressType; ?>:street<?php echo $_i ?>" value="<?php echo $this->escapeHtml($this->getAddress()->getStreet($_i)) ?>" class="input-text <?php echo $_streetValidationClassNotRequired ?>" />
        </div>
    </li>
<?php endfor; ?>
<li class="fields">
    <div class="field">
        <label for="<?php echo $_addressType; ?>:city" class="required"><em>*</em><?php echo $_postnlHelper->__('City') ?></label>
        <div class="input-box">
            <input type="text" title="<?php echo $_postnlHelper->__('City') ?>" name="<?php echo $_addressType; ?>[city]" value="<?php echo $this->escapeHtml($this->getAddress()->getCity()) ?>" class="input-text <?php echo $this->helper('postnl/addressValidation')->getAttributeValidationClass('city') ?> <?php echo $_readOnlyClass; ?>" id="<?php echo $_addressType; ?>:city" <?php echo $_readOnly; ?>/>
        </div>
    </div>
</li>

<!-- Hidden fields for all the street lines to force them in the proper order regardless of the order in which they are displayed. -->
<div style="display:none;">
    <input type="hidden" name="<?php echo $_addressType; ?>[street][]" id="<?php echo $_addressType; ?>:street1"/>
    <input type="hidden" name="<?php echo $_addressType; ?>[street][]" id="<?php echo $_addressType; ?>:street2"/>
    <input type="hidden" name="<?php echo $_addressType; ?>[street][]" id="<?php echo $_addressType; ?>:street3"/>
    <?php for ($_i = 4, $_n = $this->helper('customer/address')->getStreetLines(); $_i <= $_n; $_i++): ?>
        <input type="hidden" name="<?php echo $_addressType; ?>[street][]" id="<?php echo $_addressType; ?>:street<?php echo $_i ?>"/>
    <?php endfor; ?>
</div>

<script type="text/javascript">
//<![CDATA[
    <?php for ($_i = 4, $_n = $this->helper('customer/address')->getStreetLines(); $_i <= $_n; $_i++): ?>
        $('virtual:<?php echo $_addressType; ?>:street<?php echo $_i; ?>').observe('change', function(event) {
            var element = Event.element(event);
            var value = element.getValue();

            $('<?php echo $_addressType; ?>:street<?php echo $_i; ?>').setValue(value);
        });
    <?php endfor; ?>

    document.observe('dom:loaded', function() {
        var postcodeCheck<?php echo $_addressType; ?> = new PostnlPostcodecheck(
            '<?php echo $this->getUrl('postnl/addressValidation/postcodeCheck', array('_secure' => true)); ?>',
            '<?php echo $_addressType; ?>',
            '<?php echo $_addressType; ?>:country_id',
            '<?php echo $_addressType; ?>:postcode',
            '<?php echo $_addressType; ?>:street1',
            '<?php echo $_addressType; ?>:street2',
            '<?php echo $_addressType; ?>:street3',
            '<?php echo $_addressType; ?>:city',
            'virtual:'
        );
        window.postcodeCheck<?php echo $_addressType; ?> = postcodeCheck<?php echo $_addressType; ?>;

        postcodeCheck<?php echo $_addressType; ?>.errorMax = <?php echo $_maxAttempts; ?>;
        postcodeCheck<?php echo $_addressType; ?>.timeoutDelay = '<?php echo $_timeoutDelay; ?>';
        postcodeCheck<?php echo $_addressType; ?>.init();

        <?php if ($_addressType == 'shipping'): ?>
            $('billing:country_id').observe('change', function() {
                postcodeCheck<?php echo $_addressType; ?>.changePostcodeCheckDisabledFields($('billing:country_id').getValue());
            });

            /**
             * Extend the shipping object as the default is unable to handle the 'virtual:' field ID prefix.
             */
            Object.extend(shipping, {
                syncWithBilling : function() {
                    $('billing-address-select') && this.newAddress(!$('billing-address-select').value);
                    $('shipping:same_as_billing').checked = true;
                    if (!$('billing-address-select') || !$('billing-address-select').value) {
                        arrElements = Form.getElements(this.form);
                        for (var elemIndex in arrElements) {
                            if (arrElements[elemIndex].id) {
                                var sourceField = $(arrElements[elemIndex].id.replace(/shipping:/, 'billing:'));
                                if (sourceField){
                                    arrElements[elemIndex].value = sourceField.value;
                                }
                            }
                        }
                        //$('shipping:country_id').value = $('billing:country_id').value;
                        shippingRegionUpdater.update();
                        $('shipping:region_id').value = $('billing:region_id').value;
                        $('shipping:region').value = $('billing:region').value;
                        //shippingForm.elementChildLoad($('shipping:country_id'), this.setRegionValue.bind(this));
                    } else {
                        $('shipping-address-select').value = $('billing-address-select').value;
                    }
                }
            });
        <?php endif; ?>
    });
//]]>
</script>
